{"version":3,"sources":["components/Footer/Footer.tsx","components/NewTo/NewTo.tsx","components/SignIn/SignIn.tsx","components/CreateAccount/CreateAccount.tsx","components/Password/Password.tsx","components/Login/Login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Footer","className","href","NewTo","history","useHistory","onClick","e","preventDefault","push","SignIn","setCreate","id","noValidate","type","name","placeholder","required","document","querySelector","classList","add","CreateAccount","Password","value","Login","React","createContext","create","useState","location","useLocation","TransitionGroup","CSSTransition","key","pathname","classNames","timeout","exact","path","children","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yVAaeA,G,wBAVA,WAEX,OACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,wCAAf,wCACA,yBAAKA,UAAU,6BAA4B,uBAAGC,KAAK,IAAID,UAAU,qBAAtB,kB,uBCOxCE,EAZD,WACV,IAAMC,EAAUC,cAEhB,OACI,yBAAKJ,UAAU,OACX,yBAAKA,UAAU,UACX,uBAAGA,UAAU,iCAAb,oBAA8D,uBAAGC,KAAK,IAAII,QAAS,SAACC,GAAQA,EAAEC,iBAAkBJ,EAAQK,KAAK,YAAcR,UAAU,UAAvF,sBCiC/DS,EAjCiB,SAAC,GAAkB,EAAhBC,UACfN,cAYhB,OACI,yBAAKJ,UAAU,0BACX,wBAAIA,UAAU,6BAAd,WACA,yBAAKA,UAAU,UACX,0BAAMW,GAAG,QAAQC,YAAU,GACvB,2BAAOZ,UAAU,UAAjB,cACA,2BAAOa,KAAK,OAAOb,UAAU,aAAaW,GAAG,gBAAgBG,KAAK,gBAAgBC,YAAY,WAAWC,UAAQ,IACjH,yBAAKhB,UAAU,kCAAf,kCAGA,4BAAQa,KAAK,SAASb,UAAU,qDAAqDK,QAlBjF,WACHY,SAASC,cAAc,UAI/BC,UAAUC,IAAI,mBAaP,UAGR,yBAAKpB,UAAU,UACZ,kBAAC,EAAD,SCzBAqB,EATO,WAElB,OACI,yBAAKrB,UAAU,OACX,yBAAKA,UAAU,6BAAf,mBC2BGsB,G,MAxBmB,SAAC,GAAkB,EAAhBZ,UAAiB,IAC5CP,EAAUC,cAEhB,OACI,yBAAKJ,UAAU,0BACX,yBAAKA,UAAU,oCACX,wBAAIA,UAAU,eAAd,IAA6B,uBAAGC,KAAK,IAAII,QAAS,kBAAMF,EAAQK,KAAK,OAAO,KAA5E,KACA,wBAAIR,UAAU,eAAd,YAEJ,uBAAGA,UAAU,wCAAb,aACA,yBAAKA,UAAU,gCACX,2BAAOA,UAAU,UAAjB,cACA,2BAAOa,KAAK,WAAWb,UAAU,2BAA2BW,GAAG,qBAAqBI,YAAY,aAAaQ,MAAM,YAAYP,UAAQ,IACvI,yBAAKhB,UAAU,kBAAf,eAGA,4BAAQa,KAAK,SAASb,UAAU,2CAAhC,YAEJ,yBAAKA,UAAU,UACX,kBAAC,EAAD,U,gBCODwB,G,MAnBaC,IAAMC,cAJb,CACnBC,QAAQ,IAKI,WAAO,IAAD,EACUC,oBAAS,GADnB,mBACHlB,GADG,WAEZmB,EAAWC,cAEjB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAeC,IAAKJ,EAASK,SAAUC,WAAW,OAAOC,QAAS,KAChE,kBAAC,IAAD,CAAQP,SAAUA,GAChB,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,IAAIC,SAAU,kBAAC,EAAD,CAAQ7B,UAAWA,MACnD,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,YAAYC,SAAU,kBAAC,EAAD,CAAU7B,UAAWA,MAC7D,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,UAAUC,SAAU,kBAAC,EAAD,a,OCPjCC,MAff,WACE,OACE,yBAAKxC,UAAU,4BACb,yBAAKA,UAAU,WACb,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJ,yBAAKA,UAAU,wBACb,kBAAC,EAAD,SCHYyC,QACW,cAA7BC,OAAOb,SAASc,UAEe,UAA7BD,OAAOb,SAASc,UAEhBD,OAAOb,SAASc,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9B,SAAS+B,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.053ac287.chunk.js","sourcesContent":["import React from 'react'\nimport './Footer.style.scss'\n\nconst Footer = () => {\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-12 text-center body-2 color-grey\">Your Account for everything Autodesk</div>\n            <div className=\"col-12 text-center body-2\"><a href=\"#\" className=\"footer-learn-more\">Learn More</a></div>\n        </div>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst NewTo = () => {\n    const history = useHistory();\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-12\">\n                <p className=\"text-center body-2 color-grey\">New to Autodesk? <a href=\"#\" onClick={(e) =>{  e.preventDefault(); history.push('/create') }} className=\"body-2\">Create Account</a></p>\n            </div>\n        </div>\n    )\n}\n\nexport default NewTo;\n","import React, { useContext, Dispatch, SetStateAction } from 'react'\nimport './SignIn.style.scss';\nimport NewTo from '../NewTo';\nimport { useHistory } from 'react-router-dom';\n\ntype Props = {\n    setCreate: Dispatch<SetStateAction<boolean>>;\n};\n\nconst SignIn: React.FC<Props> = ({ setCreate }) => {\n    const history = useHistory();\n\n    const user = \"johnsmith\";\n\n    const handleClick = () => {\n        const form = document.querySelector(\"#form1\") as HTMLFormElement;\n        // const inputUsername = document.querySelector(\"#inputUsername\") as HTMLInputElement;\n        if (user)\n        // bootstrap set validation message\n        form.classList.add('was-validated');\n    }\n\n    return (\n        <div className=\"row content margin-t-6\">\n            <h1 className=\"col-12 title title-margin\">Sign In</h1>\n            <div className=\"col-12\">\n                <form id=\"form1\" noValidate>\n                    <label className=\"body-1\"> Username </label>\n                    <input type=\"text\" className=\"input-text\" id=\"inputUsername\" name=\"inputUsername\" placeholder=\"Username\" required />\n                    <div className=\"invalid-feedback error-message\">\n                        The username is not recognized\n                    </div>\n                    <button type=\"button\" className=\"btn btn-primary btn-login gutter-top gutter-bottom\" onClick={handleClick}>Next</button>\n                </form>\n            </div>\n            <div className=\"col-12\">\n               <NewTo />\n            </div>\n        </div>\n    )\n}\n\nexport default SignIn;\n","import React from 'react';\n\nconst CreateAccount = () => {\n    \n    return (\n        <div className=\"row\">\n            <div className=\"col-12 title title-margin\">CreateAccount</div>\n        </div>\n    )\n}\n\nexport default CreateAccount;\n","import React, { Dispatch, SetStateAction } from 'react'\nimport './Password.style.scss';\nimport NewTo from '../NewTo';\nimport { useHistory } from 'react-router-dom';\n\ntype Props = {\n    setCreate: Dispatch<SetStateAction<boolean>>;\n};\n\nconst Password: React.FC<Props> = ({ setCreate }) => {\n    const history = useHistory();\n\n    return (\n        <div className=\"row content margin-t-6\">\n            <div className=\"col-12 row password-title-margin\">\n                <h1 className=\"col-5 title\"> <a href=\"#\" onClick={() => history.push('/')}>{\"<\"}</a> </h1>\n                <h1 className=\"col-7 title\">Welcome</h1>\n            </div>\n            <p className=\"col-12 body-1 color-grey text-center\">joshsmith</p>\n            <div className=\"col-12 password-input-margin\">\n                <label className=\"body-1\"> Password </label>\n                <input type=\"password\" className=\"input-text gutter-bottom\" id=\"validationCustom01\" placeholder=\"First name\" value=\"johnsmith\" required />\n                <div className=\"valid-feedback\">\n                    Looks good!\n                </div>\n                <button type=\"button\" className=\"btn btn-primary btn-login gutter-bottom\">Sign In</button>\n            </div>\n            <div className=\"col-12\">\n                <NewTo />\n            </div>\n        </div>\n    )\n}\nexport default Password;\n","import React, { Fragment, useContext, useState } from \"react\";\nimport SignIn from \"../SignIn\";\nimport CreateAccount from \"../CreateAccount\";\nimport Password from \"../Password\";\nimport {\n  Switch,\n  Route,\n  useLocation,\n} from \"react-router-dom\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport './Login.style.scss';\n\nconst initialState = {\n  create: false,\n};\n\nexport const LoginContext = React.createContext(initialState);\n\nconst Login = () => {\n  const [create, setCreate] = useState(false);\n  const location = useLocation();\n\n  return (\n    <TransitionGroup>\n      <CSSTransition key={location.pathname} classNames=\"fade\" timeout={500}>\n        <Switch location={location}>\n          <Route exact path=\"/\" children={<SignIn setCreate={setCreate} />} />\n          <Route exact path=\"/password\" children={<Password setCreate={setCreate} />} />\n          <Route exact path=\"/create\" children={<CreateAccount />} />\n        </Switch>\n      </CSSTransition>\n    </TransitionGroup>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\nimport \"./App.style.scss\";\nimport Footer from \"./components/Footer\";\nimport Login from \"./components/Login\";\nimport { HashRouter as Router } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"container main-container\">\n      <div className=\"content\">\n        <Router>\n          <Login />\n        </Router>\n      </div>\n      <div className=\"footer gutter-bottom\">\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './custom.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}