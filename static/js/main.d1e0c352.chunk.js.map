{"version":3,"sources":["components/Footer/Footer.tsx","components/NewTo/NewTo.tsx","components/InputText/InputText.tsx","hooks/useInput.tsx","components/SignIn/SignIn.tsx","components/CreateAccount/CreateAccount.tsx","components/Password/Password.tsx","components/Login/Login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Footer","className","href","NewTo","existing","history","useHistory","onClick","e","preventDefault","push","InputText","name","label","message","otherProps","placeholder","useInput","useEffect","document","querySelectorAll","forEach","input","addEventListener","setCustomValidity","SignIn","create","useLocation","useState","buttonText","setButtonText","formRef","useRef","role","ref","id","type","form","current","inputUsername","querySelector","setTimeout","value","classList","add","CreateAccount","setCreate","required","usernameSame","passwordSame","username","confirmUsername","password","confirmPassword","checkValidity","Password","Login","React","createContext","location","TransitionGroup","CSSTransition","key","pathname","classNames","timeout","exact","path","children","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.d1e0c352.chunk.js","sourcesContent":["import React from 'react'\nimport './Footer.style.scss'\n\nconst Footer = () => {\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-12 text-center body-2 color-grey\">Your Account for everything Autodesk</div>\n            <div className=\"col-12 text-center body-2\"><a href=\"#\" className=\"footer-learn-more\">Learn More</a></div>\n        </div>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport './NewTo.style.scss';\n\ntype Props = {\n    existing?: boolean\n}\n\nconst NewTo: React.FC<Props> = ({existing}) => {\n    const history = useHistory();\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-12 newTo-margin-bottom\">\n                {existing ? <p className=\"text-center body-2 color-grey\">Already have an account? <a href=\"#\" onClick={(e) =>{  e.preventDefault(); history.push('/') }} className=\"body-2\">Sign In</a></p>\n                : <p className=\"text-center body-2 color-grey\">New to Autodesk? <a href=\"#\" onClick={(e) =>{  e.preventDefault(); history.push('/create') }} className=\"body-2\">Create Account</a></p> }\n            </div>\n        </div>\n    )\n}\n\nexport default NewTo;\n","import React, { Fragment } from 'react';\n\ntype Props = {\n    id: string;\n    message?: string;\n    label: string;\n    [otherProps:string]: any;\n}\nconst InputText: React.FC<Props>  = ({ name, label, message, ...otherProps}) => {\n    return (\n        <Fragment>\n            <label className=\"body-1\"> {label} </label>\n            <input className=\"input-text\" placeholder={label} {...otherProps}  />\n            <div className=\"invalid-feedback error-message\">{message}</div>\n        </Fragment>\n    )\n}\n\nexport default InputText","import React, { useEffect } from 'react'\n\n/**\n * This hook will clear invalid messages of inputs when user types again.\n */\nconst useInput = () => {\n    useEffect(() => {\n        var inputs = document.querySelectorAll('input');\n        inputs.forEach(function (input) {\n          input.addEventListener('input', function () {\n              // remove invalid when typing\n              input.setCustomValidity(\"\");\n          })\n        })\n      }, []);\n}\n\nexport default useInput;","import React, { useState, useRef, useEffect } from 'react'\nimport NewTo from '../NewTo';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport InputText from '../InputText';\nimport './SignIn.style.scss';\nimport useInput from '../../hooks/useInput';\n\nconst SignIn: React.FC<{create: boolean}> = ({create}) => {\n    const history = useHistory();\n    const location = useLocation();\n    useInput();\n    const [buttonText, setButtonText] = useState('Next');\n    const formRef = useRef<HTMLFormElement>(null);\n    const user = \"johnsmith\";\n\n    const validateUser = () => {\n        const form = formRef.current as HTMLFormElement;\n        const inputUsername = document.querySelector(\"#inputUsername\") as HTMLInputElement;\n        setButtonText(\"Verifying\");\n        inputUsername.setCustomValidity(\"\");\n\n        const verifyUsername = () => {\n            if (inputUsername.value !== user) {\n                inputUsername.setCustomValidity(\"Error\");\n                setButtonText(\"Next\");\n                form.classList.add('was-validated'); // bootstrap set validation message\n            } else {\n                history.push('/password');\n            }\n        }\n        setTimeout(verifyUsername, 1000);\n    }\n\n    return (\n        <div className=\"row\">\n            {create && (\n                <div className=\"alert-panel\">\n                    <div className=\"alert alert-primary success-alert\" role=\"alert\">\n                        Account Created Successfully\n                    </div>\n                </div>\n            )}\n            <h1 className=\"col-12 title title-margin\">Sign In</h1>\n            <div className=\"col-12\">\n                <form className=\"form\" ref={formRef} >\n                    <InputText id=\"inputUsername\" label=\"Username\" message=\"The username is not recognized\" />\n                    <button type=\"button\" className=\"btn btn-primary btn-login gutter-top gutter-bottom\" onClick={validateUser}>{buttonText}</button>\n                </form>\n            </div>\n            <div className=\"col-12 gutter-top\">\n               <NewTo />\n            </div>\n        </div>\n    )\n}\n\nexport default SignIn;\n","import React, { useRef, Dispatch, SetStateAction, useEffect } from 'react';\nimport InputText from '../InputText';\nimport NewTo from '../NewTo';\nimport { useHistory } from 'react-router-dom';\nimport useInput from '../../hooks/useInput';\n\nconst CreateAccount: React.FC<{ setCreate: Dispatch<SetStateAction<boolean>> }> = ({ setCreate }) => {\n    const formRef = useRef<HTMLFormElement>(null);\n    const history = useHistory();\n    useInput();\n\n    const validateUser = () => {\n        const form = formRef.current as HTMLFormElement;\n        let usernameSame = true;\n        let passwordSame = true;\n        const username = document.querySelector(`#username`) as HTMLInputElement;\n        const confirmUsername = document.querySelector(`#confirmUsername`) as HTMLInputElement;\n\n        const password = document.querySelector(`#password`) as HTMLInputElement;\n        const confirmPassword = document.querySelector(`#confirmPassword`) as HTMLInputElement;\n\n        confirmUsername.setCustomValidity(\"\");\n        confirmPassword.setCustomValidity(\"\");\n\n        if (username.value !== confirmUsername.value){\n            confirmUsername.setCustomValidity(\"error\")\n            usernameSame = false;\n        }\n\n        if (password.value !== confirmPassword.value){\n            confirmPassword.setCustomValidity(\"error\")\n            passwordSame = false;\n        }\n        \n        form.classList.add('was-validated');\n\n        if (form.checkValidity() && usernameSame && passwordSame){\n            history.push('/');\n            setCreate(true);\n        }\n    }\n\n    useEffect(() => {\n        setCreate(false);\n    }, []);\n\n    return (\n        <div className=\"row\">\n            <form className=\"form\" ref={formRef}>\n                <h1 className=\"col-12 title title-margin\">Create account</h1>\n                <div className=\"col-12 d-flex\">\n                    <div className=\"col-6 pl-0\">\n                        <InputText id=\"firstName\" label=\"First name\" message=\"Please enter your first name\" required />\n                    </div>\n                    <div className=\"col-6 pr-0\">\n                        <InputText id=\"lasttName\" label=\"Last name\" message=\"Please enter your last name\"required />\n                    </div>\n                </div>\n                <div className=\"col-12 gutter-top\">\n                    <InputText id=\"username\" label=\"Username\" message=\"Please enter your Userrname\" required/>\n                </div>\n                <div className=\"col-12 gutter-top\">\n                    <InputText id=\"confirmUsername\" label=\"Re-type username\" message=\"Please enter same Username\" required/>\n                </div>\n                <div className=\"col-12 gutter-top\">\n                    <InputText type=\"password\" id=\"password\" label=\"Password\" message=\"Please enter your Password\" required/>\n                </div>\n                <div className=\"col-12 gutter-top\">\n                    <InputText type=\"password\" id=\"confirmPassword\" label=\"Re-type password\" message=\"Please enter same password\" required/>\n                </div>\n                <div className=\"col-12 gutter-top\">\n                    <button type=\"button\" className=\"btn btn-primary btn-login gutter-top gutter-bottom\" onClick={validateUser}>Create Account</button>\n                </div>\n                <div className=\"col-12 gutter-top\">\n                    <NewTo existing/>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default CreateAccount;\n","import React, { Dispatch, SetStateAction } from 'react'\nimport './Password.style.scss';\nimport NewTo from '../NewTo';\nimport { useHistory } from 'react-router-dom';\nimport InputText from '../InputText';\n\nconst Password = () => {\n    const history = useHistory();\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-12 row password-title-margin\">\n                <h1 className=\"col-5 title\"> <a href=\"#\" onClick={() => history.push('/')}>{\"<\"}</a> </h1>\n                <h1 className=\"col-7 title\">Welcome</h1>\n            </div>\n            <p className=\"col-12 body-2 color-grey text-center\">johnsmith</p>\n            <div className=\"col-12 password-input-margin\">\n                <InputText type=\"password\" id=\"enterPassword\" label=\"Password\" />\n                <button type=\"button\" className=\"btn btn-primary btn-login gutter-top gutter-bottom\">Sign In</button>\n            </div>\n            <div className=\"col-12 gutter-top\">\n                <NewTo />\n            </div>\n        </div>\n    )\n}\nexport default Password;\n","import React, { Fragment, useContext, useState, useEffect } from \"react\";\nimport SignIn from \"../SignIn\";\nimport CreateAccount from \"../CreateAccount\";\nimport Password from \"../Password\";\nimport {\n  Switch,\n  Route,\n  useLocation,\n} from \"react-router-dom\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport './Login.style.scss';\n\nconst initialState = {\n  create: false,\n};\n\nexport const LoginContext = React.createContext(initialState);\n\nconst Login = () => {\n  const location = useLocation();\n  const [ create, setCreate ] = useState(false);\n\n  return (\n    <TransitionGroup>\n      <CSSTransition key={location.pathname} classNames=\"fade\" timeout={300}>\n        <Switch location={location}>\n          <Route exact path=\"/\" children={<SignIn create={create} />} />\n          <Route exact path=\"/password\" children={<Password />} />\n          <Route exact path=\"/create\" children={<CreateAccount setCreate={setCreate} />} />\n        </Switch>\n      </CSSTransition>\n    </TransitionGroup>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\nimport \"./App.style.scss\";\nimport Footer from \"./components/Footer\";\nimport Login from \"./components/Login\";\nimport { HashRouter as Router } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"container main-container\">\n      <div className=\"content\">\n        <Router>\n          <Login />\n        </Router>\n      </div>\n      <div className=\"footer gutter-bottom\">\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}